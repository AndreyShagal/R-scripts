e
e <- new env()
e <- new.env()
e
e$a1 <- 1:5
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
make.power (3)
s <- make.power (3)
s
s(2)
s(3)
s <- make.power (2)
s(3)
s(4)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
as.Date("23-03-1982")
as.Date("1982")
as.Date("1982-66-66")
as.Date("1982-66-12")
as.Date("1982-12-23")
as.Date("1982-12-23")
x<-
as.Date("1982-12-23")
x
undate(x)
unclass(x)
4739/365
## My R programming assignment 2
## There are 2 functions for matrix solving using holding in memory already solved matrix to save time
## And there is one extra function to generate solvable matrix.
## This is something like object with methods. Operator <<-  means that we are setting value to variable in the "upper" environment
makeCacheMatrix <- function(x = matrix()) {
solved_x <-NULL
#Have no idea why do we need it here. I am not executing it anywhere but it does not work without it
set <- function(y) {
solved_x <<- y
m <<- NULL
}
get <- function()  x  ##return x
setsolved <- function (solved_m)  solved_x <<- solved_m
getsolved <- function ()  solved_x  ## return solved_x
#returning following list  of  functions
list(set = set, get = get, setsolved = setsolved, getsolved = getsolved )
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolved()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setsolved(m)
m
}
## This function gives us random triag matrix size n
## Trial matrix is alvays solvable
## n - dimension of matrix, r - range of random values
get_triag_matrix <- function(n,r) {
m <- matrix ()
m <- sample(r,n)
for(i in 1:(n-1)){
m<-rbind(m,c(rep(0,i),sample(r,n-i)))
}
return(m)
}
# Geting sovable matrix
m1 <- get_triag_matrix(4,4)
# Initiating matrix object which can hold cache
cached_m <- makeCacheMatrix(m1)
# First time calclating
cacheSolve(cached_m)
# Second time getting from cache
cacheSolve(cached_m)
## My R programming assignment 2
## There are 2 functions for matrix solving using holding in memory already solved matrix to save time
## And there is one extra function to generate solvable matrix.
## This is something like object with methods. Operator <<-  means that we are setting value to variable in the "upper" environment
makeCacheMatrix <- function(x = matrix()) {
solved_x <-NULL
#Have no idea why do we need it here. I am not executing it anywhere but it does not work without it
#set <- function(y) {
#   solved_x <<- y
#   m <<- NULL
# }
get <- function()  x  ##return x
setsolved <- function (solved_m)  solved_x <<- solved_m
getsolved <- function ()  solved_x  ## return solved_x
#returning following list  of  functions
list(set = set, get = get, setsolved = setsolved, getsolved = getsolved )
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolved()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setsolved(m)
m
}
## This function gives us random triag matrix size n
## Trial matrix is alvays solvable
## n - dimension of matrix, r - range of random values
get_triag_matrix <- function(n,r) {
m <- matrix ()
m <- sample(r,n)
for(i in 1:(n-1)){
m<-rbind(m,c(rep(0,i),sample(r,n-i)))
}
return(m)
}
# Geting sovable matrix
m1 <- get_triag_matrix(4,4)
# Initiating matrix object which can hold cache
cached_m <- makeCacheMatrix(m1)
# First time calclating
cacheSolve(cached_m)
# Second time getting from cache
cacheSolve(cached_m)
## My R programming assignment 2
## There are 2 functions for matrix solving using holding in memory already solved matrix to save time
## And there is one extra function to generate solvable matrix.
## This is something like object with methods. Operator <<-  means that we are setting value to variable in the "upper" environment
makeCacheMatrix <- function(x = matrix()) {
solved_x <-NULL
#Not using it here but this is for case if you'd like to re-init same variable
set <- function(y) {
solved_x <<- y
m <<- NULL
}
get <- function()  x  ##return x
setsolved <- function (solved_m)  solved_x <<- solved_m
getsolved <- function ()  solved_x  ## return solved_x
#returning following list  of  functions
list(set = set, get = get, setsolved = setsolved, getsolved = getsolved )
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolved()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setsolved(m)
m
}
## This function gives us random triag matrix size n
## Trial matrix is alvays solvable
## n - dimension of matrix, r - range of random values
get_triag_matrix <- function(n,r) {
m <- matrix ()
m <- sample(r,n)
for(i in 1:(n-1)){
m<-rbind(m,c(rep(0,i),sample(r,n-i)))
}
return(m)
}
# Geting sovable matrix
m1 <- get_triag_matrix(4,4)
# Initiating matrix object which can hold cache
cached_m <- makeCacheMatrix(m1)
# First time calclating
cacheSolve(cached_m)
# Second time getting from cache
cacheSolve(cached_m)
install.packages("RCurl")
library(RCurl)
curl = getCurlHandle()
curlSetOpt(cookiejar = 'cookies.txt', followlocation = TRUE, autoreferer = TRUE, curl = curl)
curl = getCurlHandle()
curlSetOpt(cookiejar = 'cookies.txt', followlocation = TRUE, autoreferer = TRUE, curl = curl)
html <- getURL('https://wiki.artezio.com/display/PMCARD/ART-QMS', curl = curl)
curl = getCurlHandle()
curlSetOpt(cookiejar = 'cookies.txt', followlocation = TRUE, autoreferer = TRUE, curl = curl)
#html <- getURL('https://wiki.artezio.com/display/PMCARD/ART-QMS', curl = curl)
html <- getURL('https://wiki.artezio.com/login.action?os_destination=%2Findex.action', curl = curl)
?getURL
html <- getURL('https://wiki.artezio.com/login.action?os_destination=%2Findex.action',  ssl.verifypeer = TRUE , curl = curl)
html <- getURL('https://wiki.artezio.com/login.action?os_destination=%2Findex.action',  ssl.verifypeer = FALSE , curl = curl)
viewstate <- as.character(sub('.*id="__VIEWSTATE" value="([0-9a-zA-Z+/=]*).*', '\\1', html))
viewstate
params <- list(
'ctl00$ContentPlaceHolder3$Login1$UserName'    = '<USERNAME>',
'ctl00$ContentPlaceHolder3$Login1$Password'    = '<PASSWORD>',
'ctl00$ContentPlaceHolder3$Login1$LoginButton' = 'Log In',
'__VIEWSTATE'                                  = viewstate
)
postForm('https://wiki.artezio.com/login.action?os_destination=%2Findex.action', .params = params, curl = curl)
params <- list(
'ctl00$ContentPlaceHolder3$Login1$UserName'    = 'ashagalov',
'ctl00$ContentPlaceHolder3$Login1$Password'    = 'pUnx1982',
'ctl00$ContentPlaceHolder3$Login1$LoginButton' = 'Log In',
'__VIEWSTATE'                                  = viewstate
)
postForm('https://wiki.artezio.com/login.action?os_destination=%2Findex.action', .params = params, curl = curl)
my_url <-"https://wiki.artezio.com/display/PMCARD/ART-QMS"
download.file(my_url, destfile = "./myder/proj.html", method="auto" )
setwd("c:/R")
download.file(my_url, destfile = "./myder/proj.html", method="auto" )
curl = getCurlHandle()
curlSetOpt(cookiejar = 'cookies.txt', followlocation = TRUE, autoreferer = TRUE, curl = curl)
#html <- getURL('https://wiki.artezio.com/display/PMCARD/ART-QMS', curl = curl)
html <- getURL('https://wiki.artezio.com/login.action?os_destination=%2Findex.action',  ssl.verifypeer = FALSE , curl = curl)
viewstate <- as.character(sub('.*id="__VIEWSTATE" value="([0-9a-zA-Z+/=]*).*', '\\1', html))
params <- list(
'ctl00$ContentPlaceHolder3$Login1$os_username'    = 'ashagalov',
'ctl00$ContentPlaceHolder3$Login1$os_password'    = 'pUnx1982',
'ctl00$ContentPlaceHolder3$Login1$loginButton' = 'Log In',
'__VIEWSTATE'                                  = viewstate
)
postForm('https://wiki.artezio.com/login.action?os_destination=%2Findex.action', .params = params, curl = curl)
download.file(my_url, destfile = "./myder/proj.html", method="auto" )
install.packages("XML")
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
rootNode
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//price",xmlValue)
html <- getURL('https://wiki.artezio.com/login.action?os_destination=%2Findex.action',  ssl.verifypeer = FALSE , curl = curl)
viewstate <- as.character(sub('.*id="__VIEWSTATE" value="([0-9a-zA-Z+/=]*).*', '\\1', html))
params <- list(
'os_username'    = 'ashagalov',
'os_password'    = 'pUnx1982',
'loginButton' = 'Log In',
'__VIEWSTATE'                                  = viewstate
)
postForm('https://wiki.artezio.com/login.action?os_destination=%2Findex.action', .params = params, curl = curl)
curl = getCurlHandle()
curlSetOpt(cookiejar = 'cookies.txt', followlocation = TRUE, autoreferer = TRUE, curl = curl)
#html <- getURL('https://wiki.artezio.com/display/PMCARD/ART-QMS', curl = curl)
html <- getURL('https://wiki.artezio.com/login.action?os_destination=%2Findex.action',  ssl.verifypeer = FALSE , curl = curl)
viewstate <- as.character(sub('.*id="__VIEWSTATE" value="([0-9a-zA-Z+/=]*).*', '\\1', html))
params <- list(
'os_username'    = 'ashagalov',
'os_password'    = 'pUnx1982',
'loginButton' = 'Log In',
'__VIEWSTATE'                                  = viewstate
)
sss <- postForm('https://wiki.artezio.com/login.action?os_destination=%2Findex.action', .params = params, curl = curl)
download.file(my_url, destfile = "./myder/proj.html", method="auto" )
sss
params <- list(
'os_username'    = 'ashagalov',
'os_password'    = 'pUnx1982',
#  'loginButton' = 'Log In',
#  '__VIEWSTATE'                                  = viewstate
)
sss <- postForm('https://wiki.artezio.com/https://wiki.artezio.com/dologin.action', .params = params, curl = curl)
sss
params <- list(
'os_username'    = 'ashagalov',
'os_password'    = 'pUnx1982',
#  'loginButton' = 'Log In',
#  '__VIEWSTATE'                                  = viewstate
)
sss <- postForm('https://wiki.artezio.com/https://wiki.artezio.com/dologin.action', .params = params, curl = curl)
params <- list(
'os_username'    = 'ashagalov',
'os_password'    = 'pUnx1982'
#  'loginButton' = 'Log In',
#  '__VIEWSTATE'                                  = viewstate
)
sss <- postForm('https://wiki.artezio.com/https://wiki.artezio.com/dologin.action', .params = params, curl = curl)
sss
sss <- postForm('https://wiki.artezio.com/https://wiki.artezio.com/dologin.action', .params = params, curl = curl, style='POST')
sss
html <- getURL('https://wiki.artezio.com/display/PMCARD/ART-QMS', curl = curl)
html
doc <- htmlTreeParse(html,useInternal=TRUE)
scores <- xpathSApply(doc,"//td",xmlValue)
scores
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
install.packages("httr")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
names(jsonData$owner$login)
jsonData$owner$login
jsonData$owner
jsonData$owner[[login]]
jsonData$owner[[1]]
jsonData$owner[login]
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
install.packages("data.table")
DT = data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
DT <- data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
library(data.table)
DT <- data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
DT = data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
tables()
DT[DT$y=="a",]
DT
DT[2,]
DT[c(2,3)]
table()
table(y)
table(DT$y)
DT$y
DT[,table(y)]
DT[, w:=z^2]
DT
0.64^2
DT2 <- DT
DT[,zz:='Ooo!']
DT2
DT[,m:= {tmp <- (x+z); log2(tmp+5)}]
DT
tmp <- 0
DT[,m1:= {tmp <- tmp+1; tmp ]
tmp <- 0
DT[,m1:= {tmp <- tmp+1; tmp }]
DT
tmp <- 0
DT[,m1:= {tmp <<- tmp+1; tmp }]
DT
tmp <- 10
DT[,m1:= {tmp <<- tmp+1; tmp }]
DT
DT[,a:=x>0]
DT[,a:=x>0]
DT
DT[,b:= mean(x+w),by=a]
DT
set.seed(123);
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT
DT[, .N, by=x]
set.seed(123);
DT <- data.table(x=sample(letters[1:3], 1E50, TRUE))
DT[, .N, by=x]
set.seed(123);
DT <- data.table(x=sample(letters[1:3], 1E20, TRUE))
DT[, .N, by=x]
DT <- data.table(x=sample(letters[1:3], 1E10, TRUE))
DT[, .N, by=x]
set.seed(123);
DT <- data.table(x=sample(letters[1:3], 1E8, TRUE))
DT[, .N, by=x]
tabels()
tables()
DT <- data.table(x=rep(c("a","b","c"),each=100), y=rnorm(300))
setkey(DT, x)
DT['a']
DT['b']
DT['ab']
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 <- data.table(x=c('a', 'b', 'dt2'), z=5:7)
setkey(DT1, x); setkey(DT2, x)
DT1
DT2
setkey(DT1, x); setkey(DT2, x)
merge(DT1, DT2)
big_df <- data.frame(x=rnorm(1E6), y=rnorm(1E6))
file <- tempfile()
write.table(big_df, file=file, row.names=FALSE, col.names=TRUE, sep="\t", quote=FALSE)
system.time(fread(file))
system.time(fread(file))
system.time(read.table(file, header=TRUE, sep="\t"))
my_url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(my_url, destfile = "./myder/proj.csv", method="auto" )
ds1 <- read.csv(/myder/proj.csv)
head(ds1)
ds1 <- read.csv('myder/proj.csv')
head(ds1)
ds1[VAL=24]
ds1[ds1$VAL=24]
ds1[ds1$VAL==24]
ds1[VAL=24]
ds1[,ds1$VAL==24]
ds1[ds1$VAL==24,]
nrows( ds1[ds1$VAL==24,])
nrow( ds1[ds1$VAL==24,])
nrow(ds1)
ds2<-ds1[!is.na(VAL)]
nrow( ds2[ds2$VAL==24,])
nrow(ds2)
ds2<-ds1[!is.na(ds1$VAL)]
nrow( ds2[ds2$VAL==24,])
nrow(ds2)
ds2<-ds1[!is.na(ds1$VAL),]
nrow( ds2[ds2$VAL==24,])
nrow(ds2)
ds2<-ds1[!is.na(ds1$FES),]
head(ds2)
head(ds2[[FES]])
head(ds2$FES)
ds2$FES
ds1$FES
library(xlsx)
ds22 <- read.xlsx("./myder/proj.xlsx",sheetIndex=1,header=TRUE)
head(ds22)
install.packages("xlsx")
library(xlsx)
ds22 <- read.xlsx("./myder/proj.xlsx",sheetIndex=1,header=TRUE)
head(ds22)
my_url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(my_url, destfile = "./myder/proj.xlsx", method="auto" )
my_url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(my_url, destfile = "./myder/proj1.xlsx", method="auto" )
my_url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(my_url, destfile = "./myder/proj1.xlsx", method="curl" )
my_url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(my_url, destfile = "./myder/proj1.xlsx", method="auto" )
download.file(my_url, destfile = "./myder/proj1.xlsx" )
my_url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(my_url, destfile = "myder/proj12.xlsx" )
my_url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsxaccessType=DOWNLOAD"
download.file(my_url, destfile = "myder/proj12.xlsx" )
my_url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx?accessType=DOWNLOAD"
download.file(my_url, destfile = "myder/proj12.xlsx" )
ds22 <- read.xlsx("./myder/proj22.xlsx",sheetIndex=1,header=TRUE)
head(ds22)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
rootNode
xpathSApply(rootNode,"//zipcode",xmlValue)
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
rootNode
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
doc <- xmlTreeParse("myder/getdata-data-restaurants.xml",useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
ds22 = xpathSApply(rootNode,"//zipcode",xmlValue)
head(ds22)
ds22[1 = "21231"]
ds22[[1] == "21231"]
head(ds22)
class(ds22)
table(ds22)
my_url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(my_url, destfile = "./myder/last.csv", method="auto" )
ds2222 <- fread("./myder/last.csv")
DT <- fread("./myder/last.csv")
system.time()
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time( sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(DT[,mean(pwgtp15),by=SEX])
DT
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time( sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(rowMeans(DT)[DT$SEX==2])
system.time( sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time( mean(DT[DT$SEX==1,]$pwgtp15) )
system.time( mean(DT[DT$SEX==2,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time( sapply(split(DT$pwgtp15,DT$SEX),mean))
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
DT[,mean(pwgtp15),by=SEX]
