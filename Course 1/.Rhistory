cbind(2:7,2:7)
cbind(7:2,2:7)
search()
e
e <- new env()
e <- new.env()
e
e$a1 <- 1:5
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
make.power (3)
s <- make.power (3)
s
s(2)
s(3)
s <- make.power (2)
s(3)
s(4)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
as.Date("23-03-1982")
as.Date("1982")
as.Date("1982-66-66")
as.Date("1982-66-12")
as.Date("1982-12-23")
as.Date("1982-12-23")
x<-
as.Date("1982-12-23")
x
undate(x)
unclass(x)
4739/365
## My R programming assignment 2
## There are 2 functions for matrix solving using holding in memory already solved matrix to save time
## And there is one extra function to generate solvable matrix.
## This is something like object with methods. Operator <<-  means that we are setting value to variable in the "upper" environment
makeCacheMatrix <- function(x = matrix()) {
solved_x <-NULL
#Have no idea why do we need it here. I am not executing it anywhere but it does not work without it
set <- function(y) {
solved_x <<- y
m <<- NULL
}
get <- function()  x  ##return x
setsolved <- function (solved_m)  solved_x <<- solved_m
getsolved <- function ()  solved_x  ## return solved_x
#returning following list  of  functions
list(set = set, get = get, setsolved = setsolved, getsolved = getsolved )
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolved()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setsolved(m)
m
}
## This function gives us random triag matrix size n
## Trial matrix is alvays solvable
## n - dimension of matrix, r - range of random values
get_triag_matrix <- function(n,r) {
m <- matrix ()
m <- sample(r,n)
for(i in 1:(n-1)){
m<-rbind(m,c(rep(0,i),sample(r,n-i)))
}
return(m)
}
# Geting sovable matrix
m1 <- get_triag_matrix(4,4)
# Initiating matrix object which can hold cache
cached_m <- makeCacheMatrix(m1)
# First time calclating
cacheSolve(cached_m)
# Second time getting from cache
cacheSolve(cached_m)
## My R programming assignment 2
## There are 2 functions for matrix solving using holding in memory already solved matrix to save time
## And there is one extra function to generate solvable matrix.
## This is something like object with methods. Operator <<-  means that we are setting value to variable in the "upper" environment
makeCacheMatrix <- function(x = matrix()) {
solved_x <-NULL
#Have no idea why do we need it here. I am not executing it anywhere but it does not work without it
#set <- function(y) {
#   solved_x <<- y
#   m <<- NULL
# }
get <- function()  x  ##return x
setsolved <- function (solved_m)  solved_x <<- solved_m
getsolved <- function ()  solved_x  ## return solved_x
#returning following list  of  functions
list(set = set, get = get, setsolved = setsolved, getsolved = getsolved )
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolved()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setsolved(m)
m
}
## This function gives us random triag matrix size n
## Trial matrix is alvays solvable
## n - dimension of matrix, r - range of random values
get_triag_matrix <- function(n,r) {
m <- matrix ()
m <- sample(r,n)
for(i in 1:(n-1)){
m<-rbind(m,c(rep(0,i),sample(r,n-i)))
}
return(m)
}
# Geting sovable matrix
m1 <- get_triag_matrix(4,4)
# Initiating matrix object which can hold cache
cached_m <- makeCacheMatrix(m1)
# First time calclating
cacheSolve(cached_m)
# Second time getting from cache
cacheSolve(cached_m)
## My R programming assignment 2
## There are 2 functions for matrix solving using holding in memory already solved matrix to save time
## And there is one extra function to generate solvable matrix.
## This is something like object with methods. Operator <<-  means that we are setting value to variable in the "upper" environment
makeCacheMatrix <- function(x = matrix()) {
solved_x <-NULL
#Not using it here but this is for case if you'd like to re-init same variable
set <- function(y) {
solved_x <<- y
m <<- NULL
}
get <- function()  x  ##return x
setsolved <- function (solved_m)  solved_x <<- solved_m
getsolved <- function ()  solved_x  ## return solved_x
#returning following list  of  functions
list(set = set, get = get, setsolved = setsolved, getsolved = getsolved )
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolved()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setsolved(m)
m
}
## This function gives us random triag matrix size n
## Trial matrix is alvays solvable
## n - dimension of matrix, r - range of random values
get_triag_matrix <- function(n,r) {
m <- matrix ()
m <- sample(r,n)
for(i in 1:(n-1)){
m<-rbind(m,c(rep(0,i),sample(r,n-i)))
}
return(m)
}
# Geting sovable matrix
m1 <- get_triag_matrix(4,4)
# Initiating matrix object which can hold cache
cached_m <- makeCacheMatrix(m1)
# First time calclating
cacheSolve(cached_m)
# Second time getting from cache
cacheSolve(cached_m)
set.seed(1)
rpois(5, 2)
?rnorm
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
x
plot(x,y)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
plot(y)
?lm
readlines(http://www.ya.ru)
readlines("http://www.ya.ru")
readLines("http://www.ya.ru")
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x + x)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x + x)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x + x)
Rprof(NULL)
SummaryRproof
SummaryRproof()
summaryRproof()
summaryRproof()
summaryRprof()
library(datasets)
Rprof()
fit <- lm(y ~ x + x)
Rprof(NULL)
summaryRprof()
$by.self
library(datasets)
Rprof()
fit <- lm(y ~ x + x)
library(datasets)
Rprof()
fit <- lm(y ~ x + x)
Rprof(NULL)
summaryRprof()
outcome <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
swdir()
setwd("C:/R")
setwd("C:/R")
outcome <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
best <- function(state, outcome) {
hospital_stat_set <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss$State)
if (state in hss$State) {
print("YES")
}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
hospital_stat_set <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss$State)
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
hospital_stat_set <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
.Primitive("[")
source('C:/R/Assnmnt3/asgnmnt3.R')
source('C:/R/Assnmnt3/asgnmnt3.R')
source('C:/R/Assnmnt3/asgnmnt3.R')
source('C:/R/Assnmnt3/asgnmnt3.R')
source('C:/R/Assnmnt3/asgnmnt3.R')
source('C:/R/Assnmnt3/asgnmnt3.R')
source('C:/R/Assnmnt3/asgnmnt3.R')
source('C:/R/Assnmnt3/asgnmnt3.R')
source('C:/R/Assnmnt3/asgnmnt3.R')
source('C:/R/Assnmnt3/asgnmnt3.R')
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
best <- function(state, outcome) {
##hospital stat set
hss <- read.csv("Assnmnt3/outcome-of-care-measures.csv", colClasses = "character")
print(hss[[State])
##if (state in hss$State) {
##  print("YES")
##}
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AA","BB")
